<template>
  <!-- template里只能有一个根节点 -->
  <div class="demo-page">
      <div class="tutorial-page">
          <!-- <text style="color: #FF0000;">内联样式</text>
          <text id="title">ID选择器</text>
          <text class="title">class选择器</text>
          <text>tag选择器</text>
          <div class="item">
              <text>item1</text>
            </div>
            <div class="item">
              <text>item2</text>
            </div> -->

          <!-- 方式1：默认$item代表数组中的元素, $idx代表数组中的索引 -->
          <!-- <div class="tutorial-row" for="{{list}}">
            <text>{{$idx}}.{{$item.name}}</text>
          </div> -->
          <!-- 方式2：自定义元素变量名称 -->
          <!-- <div class="tutorial-row" for="value in list">
            <text>{{$idx}}.{{value.name}}</text>
          </div> -->
          <!-- 方式3：自定义元素、索引的变量名称 -->
          <!-- <div class="tutorial-row" for="(index, item) in list">
           <text>{{index}}.{{item.name}}</text>
          </div> -->

          <!-- 包含完整schema的uri -->
          <!-- <a href="tel:10086">调起电话</a>
          <a href="sms:10086">调起短信</a>
          <a href="mailto:example@xx.com">调起邮件</a>
          <!--  打开webview加载网页 -->
          <!-- <a href="https://www.baidu.com/">打开网页</a> -->

          <text id="elNode1" class="{{ elClassName + 1 }}" disabled="false" onclick="onClickHandler">组件节点1</text>
          <text id="elNode2" class="class-static-1 {{ elClassName + 2 }}" onclick="onClickHandler2('参数1', argName)">组件节点2</text>
      
      </div>

    <text class="title">欢迎打开{{title}}</text>
    <!-- 点击跳转详情页 -->
    <input class="btn" type="button" value="跳转到详情页·" onclick="routeDetail" />
  </div>
</template>

<style>
  .tutorial-page {
     /* 交叉轴居中 */
     align-items: center ;
    /* 纵向排列 */
    flex-direction: column;
  }
  /* tag选择器 */
  text {
    color: #0000FF;
  }
  /* class选择器（推荐） */
  .title {
    color: #00FF00;
  }
  /* ID选择器 */
  #title {
    color: #00A000;
  }
  /* 并列选择 */
  .title, #title {
    font-weight: bold;
  }
  /* 后代选择器 */
  .tutorial-page text {
    font-size: 42px;
  }
  .tutorial-page > .item {
    /* 有剩余空间时，允许被拉伸 */
    /*flex-grow: 1;*/
    /* 空间不够用时，不允许被压缩 */
    flex-shrink: 0;
    /* 主轴居中 */
    justify-content: center;
    width: 200px;
    height: 100px;
    margin: 10px;
    background-color: #FF0000;
  }
  /* 直接后代选择器 */
  .tutorial-page > text {
    text-decoration: underline;
  }
  .demo-page {
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .title {
    font-size: 40px;
    text-align: center;
  }
  .btn {
    width: 550px;
    height: 86px;
    margin-top: 75px;
    border-radius: 43px;
    background-color: #09ba07;
    font-size: 30px;
    color: #ffffff;
  }
</style>

<script>
  import router from '@system.router'

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      title: '示例页面',
      lcList: [],
      list: [
        {name: 'aa'},
        { name: 'bb' }
      ],
      elClassName: 'class-dynamic',
      argName: '动态参数'
    },
    onClickHandler (evt) {
      // 事件类型，参数详情
      console.info(`触发事件：类型：${evt.type}, 详情： ${JSON.stringify(evt.detail)}`);

      if (evt.target) {
        console.info(`触发事件：节点：${evt.target.id}, ${evt.target.attr.disabled}`)
      }
    },
    onClickHandler2 (arg1, arg2, evt) {
      // 事件类型，事件参数，target
      console.info(`触发事件：类型：${evt.type}, 参数： ${arg1}, ${arg2}`);
    },
    onInit() {
      this.$page.setTitleBar({ text: '生命周期' })
      this.lcList.push('onInit')
      console.info(`触发：onInit`)
      console.info(`执行：获取ViewModel的lcList属性：${this.lcList}`)   // 执行：获取ViewModel的lcList属性：onInit
      // $app信息
      console.info(`获取：manifest.json的config.data的数据：${this.$app.$data}`)
      console.info(`获取：APP文件中的数据：${this.$app.$def.data1.name}`)
      console.info(`执行：APP文件中的方法`, this.$app.$def.method1())

    },
    onReady () {
      this.lcList.push('onReady')
      console.info(`触发：onReady`)
      // console.info(`执行：获取模板节点：${this.$rootElement()}`)   // 执行：获取模板节点：<div attr={} style={"flexDirection":"column"}>...</div>
    },
    onShow () {
      this.lcList.push('onShow')
      console.info(`触发：onShow`)
      console.info(`执行：获取页面显示状态属性：${this.$visible}`)  // true
    },
    onHide () {
      this.lcList.push('onHide')
      console.info(`触发：onHide`)
      console.info(`执行：获取页面显示状态属性：${this.$visible}`)  // false
    },
    onDestroy () {
      console.info(`触发：onDestroy`)
      console.info(`执行：页面要被销毁，销毁状态：${this.$valid}，应该做取消接口订阅监听的操作: geolocation.unsubscribe()`)    // true，即将销毁
      setTimeout(function () {
        console.info(`执行：页面已被销毁，不会执行`)                // 页面已销毁，不会执行
      }.bind(this), 0)
    },
    onBackPress () {
      console.info(`触发：onBackPress`)

      // true：表示自己处理；否则默认返回上一页
      // return true
    },
    onMenuPress () {
      this.lcList.push('onMenuPress')

      console.info(`触发：onMenuPress`)
    },
    routeDetail () {
      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
      router.push ({
        uri: '/VideoDetail'
      })
    }
  }
</script>
